<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>stan</string>
	</array>
	<key>name</key>
	<string>Stan</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#numbers</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>block declarations</string>
			<key>match</key>
			<string>\b(functions|data|transformed\s+data|parameters|transformed\s+parameters|model|generated\s+quantities)\b</string>
			<key>name</key>
			<string>keyword.other.stan</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>variable types</string>
			<key>match</key>
			<string>\b(int|real|vector|simplex|ordered|positive_ordered|row_vector|matrix|corr_matrix|cov_matrix|cholesky_factor_cov|cholesky_factor_corr|void)\b</string>
			<key>name</key>
			<string>storage.type.stan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(for|in|while|if|else)\b</string>
			<key>name</key>
			<string>keyword.control.stan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.range.stan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>punctuation.operator.equal.stan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(lower|upper)\s*(=)</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\breturn\b</string>
			<key>name</key>
			<string>keyword.other.return.stan</string>
		</dict>
		<dict>
			<key>captures</key>
			<dict>
				<key>1</key>
				<dict>
					<key>name</key>
					<string>keyword.other.target.stan</string>
				</dict>
				<key>2</key>
				<dict>
					<key>name</key>
					<string>keyword.operator.accumulator.stan</string>
				</dict>
			</dict>
			<key>match</key>
			<string>\b(target)\s*([+][=])</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>truncation operator T[]</string>
			<key>match</key>
			<string>\bT(?=\s*\[)</string>
			<key>name</key>
			<string>keyword.other.truncation.stan</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#distributions</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b(print|reject)\b</string>
			<key>name</key>
			<string>keyword.other.special-functions.stan</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#functions</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#reserved</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\b([a-zA-Z0-9_]*__|[0-9_][A-Za-z0-9_]+|_)\b</string>
			<key>name</key>
			<string>invalid.illegal.variable</string>
		</dict>
		<dict>
			<key>comment</key>
			<string>generic variable names</string>
			<key>match</key>
			<string>\b[A-Za-z][0-9A-Za-z_]*\b</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#operators</string>
		</dict>
		<dict>
			<key>match</key>
			<string>,</string>
			<key>name</key>
			<string>meta.delimiter.comma.stan</string>
		</dict>
		<dict>
			<key>begin</key>
			<string>{</string>
			<key>beginCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.begin.stan</string>
				</dict>
			</dict>
			<key>end</key>
			<string>}</string>
			<key>endCaptures</key>
			<dict>
				<key>0</key>
				<dict>
					<key>name</key>
					<string>punctuation.section.block.end.stan</string>
				</dict>
			</dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>$base</string>
				</dict>
			</array>
		</dict>
		<dict>
			<key>match</key>
			<string>[{}]</string>
			<key>name</key>
			<string>meta.brace.curly.stan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\[|\]</string>
			<key>name</key>
			<string>meta.brace.square.stan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\(|\)</string>
			<key>name</key>
			<string>meta.brace.round.stan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>\;</string>
			<key>name</key>
			<string>punctuation.terminator.statement.stan</string>
		</dict>
		<dict>
			<key>match</key>
			<string>[|]</string>
			<key>name</key>
			<string>punctuation.sampling.bar.stan</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*(#)(include)</string>
					<key>beginCaptures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.stan</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>keyword.control.directive.include.stan</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.preprocessor.stan</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>begin</key>
							<string>["']</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.stan</string>
								</dict>
							</dict>
							<key>end</key>
							<string>["']</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.stan</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.include.stan</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*\*(?!/)</string>
					<key>captures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.stan</string>
						</dict>
					</dict>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block.documentation.stan</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#docblock</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.stan</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>/* comment block */</string>
					<key>end</key>
					<string>\*/</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.stan</string>
						</dict>
					</dict>
					<key>name</key>
					<string>comment.block.stan</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>//</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.stan</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>// comment</string>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.double-slash.stan</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>#</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.comment.stan</string>
						</dict>
					</dict>
					<key>comment</key>
					<string># comment</string>
					<key>end</key>
					<string>\n</string>
					<key>name</key>
					<string>comment.line.number-sign.stan</string>
				</dict>
			</array>
		</dict>
		<key>distributions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.operator.sampling.stan</string>
						</dict>
						<key>2</key>
						<dict>
							<key>name</key>
							<string>support.function.distribution.stan</string>
						</dict>
					</dict>
					<key>match</key>
					<string>([~])\s*(bernoulli|bernoulli_logit|bernoulli_logit_glm|beta|beta_binomial|beta_proportion|binomial|binomial_logit|categorical|categorical_logit|cauchy|chi_square|dirichlet|discrete_range|double_exponential|exp_mod_normal|exponential|frechet|gamma|gaussian_dlm_obs|gumbel|hypergeometric|inv_chi_square|inv_gamma|inv_wishart|lkj_corr|lkj_corr_cholesky|logistic|lognormal|multi_gp|multi_gp_cholesky|multi_normal|multi_normal_cholesky|multi_normal_prec|multi_student_t|multinomial|multinomial_logit|neg_binomial|neg_binomial_2|neg_binomial_2_log|neg_binomial_2_log_glm|normal|normal_id_glm|ordered_logistic|ordered_logistic_glm|ordered_probit|pareto|pareto_type_2|poisson|poisson_log|poisson_log_glm|rayleigh|scaled_inv_chi_square|skew_normal|student_t|uniform|von_mises|weibull|wiener|wishart)\b</string>
				</dict>
			</array>
		</dict>
		<key>docblock</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?&lt;!\w)@(param|return)\b</string>
					<key>name</key>
					<string>storage.type.class.standoc</string>
				</dict>
			</array>
		</dict>
		<key>functions</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(bernoulli_ccdf_log|bernoulli_cdf_log|bernoulli_log|bernoulli_logit_log|beta_binomial_ccdf_log|beta_binomial_cdf_log|beta_binomial_log|beta_ccdf_log|beta_cdf_log|beta_log|binomial_ccdf_log|binomial_cdf_log|binomial_coefficient_log|binomial_log|binomial_logit_log|categorical_log|categorical_logit_log|cauchy_ccdf_log|cauchy_cdf_log|cauchy_log|chi_square_ccdf_log|chi_square_cdf_log|chi_square_log|dirichlet_log|double_exponential_ccdf_log|double_exponential_cdf_log|double_exponential_log|exp_mod_normal_ccdf_log|exp_mod_normal_cdf_log|exp_mod_normal_log|exponential_ccdf_log|exponential_cdf_log|exponential_log|frechet_ccdf_log|frechet_cdf_log|frechet_log|gamma_ccdf_log|gamma_cdf_log|gamma_log|gaussian_dlm_obs_log|get_lp|gumbel_ccdf_log|gumbel_cdf_log|gumbel_log|hypergeometric_log|increment_log_prob|integrate_ode|integrate_ode_adams|integrate_ode_bdf|integrate_ode_rk45|inv_chi_square_ccdf_log|inv_chi_square_cdf_log|inv_chi_square_log|inv_gamma_ccdf_log|inv_gamma_cdf_log|inv_gamma_log|inv_wishart_log|lkj_corr_cholesky_log|lkj_corr_log|logistic_ccdf_log|logistic_cdf_log|logistic_log|lognormal_ccdf_log|lognormal_cdf_log|lognormal_log|multi_gp_cholesky_log|multi_gp_log|multi_normal_cholesky_log|multi_normal_log|multi_normal_prec_log|multi_student_t_log|multinomial_log|multiply_log|neg_binomial_2_ccdf_log|neg_binomial_2_cdf_log|neg_binomial_2_log|neg_binomial_2_log_log|neg_binomial_ccdf_log|neg_binomial_cdf_log|neg_binomial_log|normal_ccdf_log|normal_cdf_log|normal_log|ordered_logistic_log|pareto_ccdf_log|pareto_cdf_log|pareto_log|pareto_type_2_ccdf_log|pareto_type_2_cdf_log|pareto_type_2_log|poisson_ccdf_log|poisson_cdf_log|poisson_log|poisson_log_log|qr_Q|qr_R|rayleigh_ccdf_log|rayleigh_cdf_log|rayleigh_log|scaled_inv_chi_square_ccdf_log|scaled_inv_chi_square_cdf_log|scaled_inv_chi_square_log|skew_normal_ccdf_log|skew_normal_cdf_log|skew_normal_log|student_t_ccdf_log|student_t_cdf_log|student_t_log|uniform_ccdf_log|uniform_cdf_log|uniform_log|von_mises_log|weibull_ccdf_log|weibull_cdf_log|weibull_log|wiener_log|wishart_log)\b</string>
					<key>name</key>
					<string>invalid.deprecated.function.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(Phi|Phi_approx|abs|acos|acosh|algebra_solver|algebra_solver_newton|append_col|append_row|asin|asinh|atan|atan2|atanh|bernoulli_cdf|bernoulli_lccdf|bernoulli_lcdf|bernoulli_logit_l[u]?pmf|bernoulli_l[u]?pmf|bernoulli_rng|bernoulli_logit_glm_l[u]?pmf|bessel_first_kind|bessel_second_kind|beta_binomial_cdf|beta_binomial_lccdf|beta_binomial_lcdf|beta_binomial_l[u]?pmf|beta_binomial_rng|beta_proportionbeta_proportion_lccdf|beta_proportion_lcdf|beta_proportion_l[u]?pdf|beta_proportion_rng|beta_cdf|beta_lccdf|beta_lcdf|beta_l[u]?pdf|beta_rng|binary_log_loss|binomial_cdf|binomial_lccdf|binomial_lcdf|binomial_logit_l[u]?pmf|binomial_l[u]?pmf|binomial_rng|block|categorical_logit_l[u]?pmf|categorical_l[u]?pmf|categorical_rng|cauchy_cdf|cauchy_lccdf|cauchy_lcdf|cauchy_l[u]?pdf|cauchy_rng|cbrt|ceil|chi_square_cdf|chi_square_lccdf|chi_square_lcdf|chi_square_l[u]?pdf|chi_square_rng|cholesky_decompose|col|cols|columns_dot_product|columns_dot_self|cos|cosh|crossprod|csr_extract_u|csr_extract_v|csr_extract_w|csr_matrix_times_vector|csr_to_dense_matrix|cumulative_sum|determinant|diag_matrix|diag_post_multiply|diag_pre_multiply|diagonal|digamma|dims|discrete_range_cdf|discrete_range_lccdf|discrete_range_lcdf|discrete_range_l[u]?pmf|discrete_range_rng|dirichlet_l[u]?pdf|dirichlet_rng|distance|dot_product|dot_self|double_exponential_cdf|double_exponential_lccdf|double_exponential_lcdf|double_exponential_l[u]?pdf|double_exponential_rng|e|eigenvalues_sym|eigenvectors_sym|erf|erfc|exp|exp2|exp_mod_normal_cdf|exp_mod_normal_lccdf|exp_mod_normal_lcdf|exp_mod_normal_l[u]?pdf|exp_mod_normal_rng|expm1|exponential_cdf|exponential_lccdf|exponential_lcdf|exponential_l[u]?pdf|exponential_rng|fabs|falling_factorial|fdim|floor|fma|fmax|fmin|fmod|frechet_cdf|frechet_lccdf|frechet_lcdf|frechet_l[u]?pdf|frechet_rng|gamma_cdf|gamma_lccdf|gamma_lcdf|gamma_l[u]?pdf|gamma_p|gamma_q|gamma_rng|gaussian_dlm_obs_l[u]?pdf|gumbel_cdf|gumbel_lccdf|gumbel_lcdf|gumbel_l[u]?pdf|gumbel_rng|head|hmm_marginal|hypergeometric_l[u]?pmf|hypergeometric_rng|hypot|if_else|inc_beta|int_step|integrate_1d|inv|inv_chi_square_cdf|inv_chi_square_lccdf|inv_chi_square_lcdf|inv_chi_square_l[u]?pdf|inv_chi_square_rng|inv_cloglog|inv_gamma_cdf|inv_gamma_lccdf|inv_gamma_lcdf|inv_gamma_l[u]?pdf|inv_gamma_rng|inv_logit|inv_phi|inv_sqrt|inv_square|inv_wishart_l[u]?pdf|inv_wishart_rng|inverse|inverse_spd|is_inf|is_nan|lbeta|lchoose|lgamma|lkj_corr_cholesky_l[u]?pdf|lkj_corr_cholesky_rng|lkj_corr_l[u]?pdf|lkj_corr_rng|lmgamma|lmultiply|log|log10|log1m|log1m_exp|log1m_inv_logit|log1p|log1p_exp|log2|log_determinant|log_diff_exp|log_falling_factorial|log_inv_logit|log_mix|log_rising_factorial|log_softmax|log_sum_exp|logistic_cdf|logistic_lccdf|logistic_lcdf|logistic_l[u]?pdf|logistic_rng|logit|lognormal_cdf|lognormal_lccdf|lognormal_lcdf|lognormal_l[u]?pdf|lognormal_rng|machine_precision|map_rect|max|mdivide_left_tri_low|mdivide_right_tri_low|mean|min|modified_bessel_first_kind|modified_bessel_second_kind|multi_gp_cholesky_l[u]?pdf|multi_gp_l[u]?pdf|multi_normal_cholesky_l[u]?pdf|multi_normal_cholesky_rng|multi_normal_l[u]?pdf|multi_normal_prec_l[u]?pdf|multi_normal_rng|multi_student_t_l[u]?pdf|multi_student_t_rng|multinomial_l[u]?pmf|multinomial_rng|multinomial_logit_l[u]?pdf|multinomial_logit_rng|multiply_lower_tri_self_transpose|neg_binomial_2_cdf|neg_binomial_2_lccdf|neg_binomial_2_lcdf|neg_binomial_2_log_l[u]?pmf|neg_binomial_2_log_rng|neg_binomial_2_l[u]?pmf|neg_binomial_2_rng|neg_binomial_cdf|neg_binomial_lccdf|neg_binomial_lcdf|neg_binomial_l[u]?pmf|neg_binomial_rng|neg_binomial_2_log_glm_l[u]?pmf|negative_infinity|normal_cdf|normal_lccdf|normal_lcdf|normal_l[u]?pdf|normal_rng|normal_id_glm_l[u]?pdf|not_a_number|num_elements|ordered_logistic_l[u]?pmf|ordered_logistic_rng|ordered_logistic_glm_l[u]?pmf|ordered_probit_l[u]?pdf|ordered_probit_rng|owens_t|pareto_cdf|pareto_lccdf|pareto_lcdf|pareto_l[u]?pdf|pareto_rng|pareto_type_2_cdf|pareto_type_2_lccdf|pareto_type_2_lcdf|pareto_type_2_l[u]?pdf|pareto_type_2_rng|pi|poisson_cdf|poisson_lccdf|poisson_lcdf|poisson_log_l[u]?pmf|poisson_log_rng|poisson_l[u]?pmf|poisson_rng|poisson_log_glm_l[u]?pmf|positive_infinity|pow|prod|qr_thin_Q|qr_thin_R|quad_form|quad_form_diag|quad_form_sym|rank|rayleigh_cdf|rayleigh_lccdf|rayleigh_lcdf|rayleigh_l[u]?pdf|rayleigh_rng|reduce_sum|reduce_sum_static|rep_array|rep_matrix|rep_row_vector|rep_vector|rising_factorial|round|row|rows|rows_dot_product|rows_dot_self|scaled_inv_chi_square_cdf|scaled_inv_chi_square_lccdf|scaled_inv_chi_square_lcdf|scaled_inv_chi_square_l[u]?pdf|scaled_inv_chi_square_rng|sd|segment|sin|singular_values|sinh|size|skew_normal_cdf|skew_normal_lccdf|skew_normal_lcdf|skew_normal_l[u]?pdf|skew_normal_rng|softmax|sort_asc|sort_desc|sort_indices_asc|sort_indices_desc|sqrt|sqrt2|square|squared_distance|step|student_t_cdf|student_t_lccdf|student_t_lcdf|student_t_l[u]?pdf|student_t_rng|sub_col|sub_row|sum|tail|tan|tanh|target|tcrossprod|tgamma|to_array_1d|to_array_2d|to_matrix|to_row_vector|to_vector|trace|trace_gen_quad_form|trace_quad_form|trigamma|trunc|uniform_cdf|uniform_lccdf|uniform_lcdf|uniform_l[u]?pdf|uniform_rng|variance|von_mises_l[u]?pdf|von_mises_rng|weibull_cdf|weibull_lccdf|weibull_lcdf|weibull_l[u]?pdf|weibull_rng|wiener_l[u]?pdf|wishart_l[u]?pdf|wishart_rng)\b</string>
					<key>name</key>
					<string>support.function.function.stan</string>
				</dict>
			</array>
		</dict>
		<key>numbers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?x)
(
[0-9]+\.[0-9]*([eE]-?[0-9]+)?
|
\.[0-9]+([eE][-]?[0-9]+)?
|
[0-9]+[eE][-]?[0-9]+
)</string>
					<key>name</key>
					<string>constant.numeric.real.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[0-9]+(?=[^A-Za-z_])</string>
					<key>name</key>
					<string>constant.numeric.integer.stan</string>
				</dict>
			</array>
		</dict>
		<key>operators</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>&lt;-</string>
					<key>name</key>
					<string>invalid.deprecated.assignment.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>:</string>
					<key>name</key>
					<string>keyword.operator.colon.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>~</string>
					<key>name</key>
					<string>keyword.operator.sampling.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[?]</string>
					<key>name</key>
					<string>keyword.operator.conditional.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>[|]{2}|&amp;&amp;</string>
					<key>name</key>
					<string>keyword.operator.logical.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>==|!=|&lt;=?|&gt;=?</string>
					<key>name</key>
					<string>keyword.operator.comparison.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>!</string>
					<key>name</key>
					<string>keyword.operator.logical.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\+|-|\.?\*|\.?/|%|\\|\^|'</string>
					<key>name</key>
					<string>keyword.operator.arithmetic.stan</string>
				</dict>
				<dict>
					<key>match</key>
					<string>=</string>
					<key>name</key>
					<string>keyword.operator.assignment.stan</string>
				</dict>
			</array>
		</dict>
		<key>reserved</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>comment</key>
					<string>reserved words in C++ that are invalid in Stan</string>
					<key>match</key>
					<string>\b(alignas|alignof|and|and_eq|asm|auto|bitand|bitor|bool|break|case|catch|char|char16_t|char32_t|class|compl|const|constexpr|const_cast|continue|decltype|default|delete|do|double|dynamic_cast|else|enum|explicit|export|extern|false|float|for|friend|goto|if|inline|int|long|mutable|namespace|new|noexcept|not|not_eq|nullptr|operator|or|or_eq|private|protected|public|register|reinterpret_cast|return|short|signed|sizeof|static|static_assert|static_cast|struct|switch|template|this|thread_local|throw|true|try|typedef|typeid|typename|union|unsigned|using|virtual|void|volatile|wchar_t|while|xor|xor_eq)\b</string>
					<key>name</key>
					<string>invalid.illegal.reserved.stan</string>
				</dict>
				<dict>
					<key>comment</key>
					<string>Words reserved for internal Stan use</string>
					<key>match</key>
					<string>\b(for|in|while|repeat|until|if|then|else|true|false|var|fvar|STAN_MAJOR|STAN_MINOR|STAN_PATCH|STAN_MATH_MAJOR|STAN_MATH_MINOR|STAN_MATH_PATCH)\b</string>
					<key>name</key>
					<string>invalid.illegal.reserved.stan</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>"</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.stan</string>
						</dict>
					</dict>
					<key>comment</key>
					<string>string literal</string>
					<key>end</key>
					<string>"</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.stan</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.double.stan</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>comment</key>
							<string>Stan strings can only contain ASCII printable characters</string>
							<key>match</key>
							<string>[^ a-zA-Z0-9~@#$%^&amp;*_'`\-+={}\[\]()&lt;&gt;|/!?.,;:"]+</string>
							<key>name</key>
							<string>invalid.illegal.string.stan</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.stan</string>
</dict>
</plist>
